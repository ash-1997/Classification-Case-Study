{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "98f06898",
   "metadata": {},
   "source": [
    "Problem Statement :\n",
    "In below given 'Insurance' dataset we have multiple features as below :\n",
    "\n",
    "1.Continuous Numeric Features :\n",
    "- age\n",
    "- bmi\n",
    "- charges\n",
    "\n",
    "2.Binary Classification Features : (Where 0 stands for 'No' & 1 stands for 'Yes')\n",
    "- sex\n",
    "- smoker\n",
    "\n",
    "3.Multiclass classification Features :\n",
    "- children\n",
    "- region\n",
    "\n",
    "We have to predict where the customer is going to claim for insurance or not claim for insurance on the basis of\n",
    "above given features.\n",
    "Means 'insuranceclaim' is our output.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1077a8f",
   "metadata": {},
   "source": [
    "# Import Liabraries :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "b0135b94",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import Basic Liabraries :\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "#Import Other Liabraries :\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn import tree\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.svm import LinearSVC\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.preprocessing import MinMaxScaler\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9cccefad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>smoker</th>\n",
       "      <th>region</th>\n",
       "      <th>charges</th>\n",
       "      <th>insuranceclaim</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>27.900</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>16884.92400</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>33.770</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1725.55230</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>33.000</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4449.46200</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>22.705</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>21984.47061</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "      <td>28.880</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3866.85520</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  sex     bmi  children  smoker  region      charges  insuranceclaim\n",
       "0   19    0  27.900         0       1       3  16884.92400               1\n",
       "1   18    1  33.770         1       0       2   1725.55230               1\n",
       "2   28    1  33.000         3       0       2   4449.46200               0\n",
       "3   33    1  22.705         0       0       1  21984.47061               0\n",
       "4   32    1  28.880         0       0       1   3866.85520               1"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Load the 'Insurance' dataset :\n",
    "df=pd.read_csv('insurance.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ce47e1fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1338, 8)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check the No.of rows & columns in 'insurance' dataset :\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e444bf7b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    783\n",
       "0    555\n",
       "Name: insuranceclaim, dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#As our output is in binary form check balance between both the classes in output column 'insuranceclaim' :\n",
    "df['insuranceclaim'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "32a6f74a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check for Duplicate values :\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d7d6b906",
   "metadata": {},
   "outputs": [],
   "source": [
    "#As we found duplicate value need to remove the same from dataset permenantly :\n",
    "df.drop_duplicates(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1e7aae9a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Cross check Duplicate value :\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c701857c",
   "metadata": {},
   "source": [
    "# Null Values Treatment :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a4f8028e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age               0\n",
       "sex               0\n",
       "bmi               0\n",
       "children          0\n",
       "smoker            0\n",
       "region            0\n",
       "charges           0\n",
       "insuranceclaim    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking for Null values in 'insurance' dataset :\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d8b29e5d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualise Null values :\n",
    "sns.heatmap(df.isnull())\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "bd43188a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age                 int64\n",
       "sex                 int64\n",
       "bmi               float64\n",
       "children            int64\n",
       "smoker              int64\n",
       "region              int64\n",
       "charges           float64\n",
       "insuranceclaim      int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Cross check Null values with dtypes :\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "16648ad4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#In given 'insurance' dataset there is no any null value found."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d35b7c4",
   "metadata": {},
   "source": [
    "# Visualization :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9d9e6af4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#As we have features in continuous numeric , binary class & multiple class \n",
    "#Use scatterplot to visualise & check correlation of continuous numeric type features with output 'insuranceclaim'\n",
    "#Use countplot to visualise & check correlation of categorical type features with output 'insuranceclaim'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1b6850a",
   "metadata": {},
   "source": [
    "Scatterplot :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "35847192",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#1.Check relation of feature 'age' with output 'insuranceclaim' :\n",
    "sns.scatterplot(data=df,x='age',y='insuranceclaim')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5a9f68ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "#As per above scatterplot 'age' seems important column to predict the output 'insuranceclaim' \n",
    "#As we see in the above scatterplot any age person can claim for insurance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "553bb1ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#2.Check relation of feature 'bmi' with output 'insuranceclaim' :\n",
    "sns.scatterplot(data=df,x='bmi',y='insuranceclaim')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2604f2bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#As per above scatterplot 'bmi' seems not important column to predict the output 'insuranceclaim' "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c663365b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#3.Check relation of feature 'charges' with output 'insuranceclaim' :\n",
    "sns.scatterplot(data=df,x='charges',y='insuranceclaim')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "cf035f31",
   "metadata": {},
   "outputs": [],
   "source": [
    "#As per above scatterplot 'charges' seems important column to predict the output 'insuranceclaim' "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac553fa9",
   "metadata": {},
   "source": [
    "Countplot :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f164c62a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    782\n",
      "0    555\n",
      "Name: insuranceclaim, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visuliaze the output column 'insuranceclaim' :\n",
    "sns.countplot(data=df,x='insuranceclaim')\n",
    "f=df['insuranceclaim'].value_counts()\n",
    "print(f)\n",
    "plt.yticks(f)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "0fcd1550",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    675\n",
      "0    662\n",
      "Name: sex, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#check the column 'sex' :\n",
    "plt.figure(figsize=(5,8))\n",
    "sns.countplot(data=df,x='insuranceclaim',hue='sex')\n",
    "f=df['sex'].value_counts()\n",
    "print(f)\n",
    "plt.yticks(f)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8c93c818",
   "metadata": {},
   "outputs": [],
   "source": [
    "#As per above countplot 'sex' column is not important column to predict the output 'insuranceclaim'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d5bbae6a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    1063\n",
      "1     274\n",
      "Name: smoker, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Check the column 'smoker' :\n",
    "plt.figure(figsize=(5,5))\n",
    "sns.countplot(data=df,x='insuranceclaim',hue='smoker')\n",
    "f=df['smoker'].value_counts()\n",
    "print(f)\n",
    "plt.yticks(f)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "b83d5a39",
   "metadata": {},
   "outputs": [],
   "source": [
    "#As per above countplot 'smoker' is important features to predict the output 'insuranceclaim'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "325d6b5d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    573\n",
      "1    324\n",
      "2    240\n",
      "3    157\n",
      "4     25\n",
      "5     18\n",
      "Name: children, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Check the column 'children' :\n",
    "sns.countplot(data=df,x='insuranceclaim',hue='children')\n",
    "f=df['children'].value_counts()\n",
    "print(f)\n",
    "plt.yticks(f)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "0375c38b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#As per above countplot 'children' is important features to predict the output 'insuranceclaim'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "df88a6f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2    364\n",
      "3    325\n",
      "1    324\n",
      "0    324\n",
      "Name: region, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Check the column 'region' :\n",
    "sns.countplot(data=df,x='insuranceclaim',hue='region')\n",
    "f=df['region'].value_counts()\n",
    "print(f)\n",
    "plt.yticks(f)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "31a613dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#As per above countplot 'region' is not important features to predict the output 'insuranceclaim'."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3f30419",
   "metadata": {},
   "source": [
    "Boxplot :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "831beaab",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Use boxplot to check for outlier in the 'insurance' dataset :\n",
    "plt.figure(figsize=(9,5))\n",
    "sns.boxplot(data=df)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "53f1b65c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#As shown in above boxplot, we become to know that we have the outliers in the below column :\n",
    "#1.bmi \n",
    "#2.smoker\n",
    "#3.Charges"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "a47f60c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges',\n",
      "       'insuranceclaim'],\n",
      "      dtype='object')\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 8 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Let's check column wise outliers :\n",
    "column=df.columns\n",
    "print(column)\n",
    "\n",
    "plt.figure(figsize=(15,10))\n",
    "for i,col in enumerate(column):\n",
    "    plt.subplot(3,3,i+1)\n",
    "    sns.boxplot(x=df[col])\n",
    "plt.show()\n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68f13aba",
   "metadata": {},
   "source": [
    "Heatmap :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "b00c64ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Check the correlation between our input columns & output column :\n",
    "sns.heatmap(df.corr(),annot=True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41c4ad6b",
   "metadata": {},
   "source": [
    "# Evaluation of Model :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "101196a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Select input & output :\n",
    "X=df.drop('insuranceclaim',axis=1)\n",
    "Y=df['insuranceclaim']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "13c32e3f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>smoker</th>\n",
       "      <th>region</th>\n",
       "      <th>charges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>27.900</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>16884.92400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>33.770</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1725.55230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>33.000</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4449.46200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>22.705</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>21984.47061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "      <td>28.880</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3866.85520</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  sex     bmi  children  smoker  region      charges\n",
       "0   19    0  27.900         0       1       3  16884.92400\n",
       "1   18    1  33.770         1       0       2   1725.55230\n",
       "2   28    1  33.000         3       0       2   4449.46200\n",
       "3   33    1  22.705         0       0       1  21984.47061\n",
       "4   32    1  28.880         0       0       1   3866.85520"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "1e8be71b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1\n",
       "1    1\n",
       "2    0\n",
       "3    0\n",
       "4    1\n",
       "Name: insuranceclaim, dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "2657d038",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Train_Test_Split :\n",
    "X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3,random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "8d8190b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create object for StandardScaler class :\n",
    "ss=StandardScaler()\n",
    "#Apply StandardScaler on input training data :\n",
    "X_train=ss.fit_transform(X_train)\n",
    "#Apply StandardScaler on input testing data :\n",
    "X_test=ss.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "7c6a5864",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.76935907, -1.05611771, -0.54584829, ..., -0.53158148,\n",
       "        -1.38997482,  0.97973397],\n",
       "       [ 1.34169182, -1.05611771, -0.57768002, ..., -0.53158148,\n",
       "        -0.48304777, -0.11634023],\n",
       "       [ 1.5563166 ,  0.94686415,  0.91841121, ..., -0.53158148,\n",
       "         1.33080632,  1.16614713],\n",
       "       ...,\n",
       "       [-1.23380557,  0.94686415,  0.5280537 , ..., -0.53158148,\n",
       "         0.42387927, -0.97698935],\n",
       "       [ 0.05394313, -1.05611771, -1.40698031, ...,  1.88117914,\n",
       "         0.42387927,  0.47286216],\n",
       "       [ 1.41323342,  0.94686415,  1.76278969, ...,  1.88117914,\n",
       "         0.42387927,  2.88193206]])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "0caf71d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.3401095 , -1.05611771,  1.39588714, ...,  1.88117914,\n",
       "        -0.48304777,  2.3934608 ],\n",
       "       [ 1.27015023,  0.94686415,  0.15444973, ..., -0.53158148,\n",
       "        -0.48304777, -0.18729799],\n",
       "       [ 1.12706704, -1.05611771,  0.29769251, ..., -0.53158148,\n",
       "        -1.38997482, -0.14439093],\n",
       "       ...,\n",
       "       [ 0.98398385,  0.94686415, -1.54435935, ..., -0.53158148,\n",
       "         1.33080632, -0.29237275],\n",
       "       [-1.30534716, -1.05611771, -0.70668229, ..., -0.53158148,\n",
       "         1.33080632, -0.9016684 ],\n",
       "       [-1.01918078,  0.94686415, -0.73683866, ..., -0.53158148,\n",
       "        -1.38997482, -0.89158843]])"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "c5b1d458",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create Function :\n",
    "def create_model(model):\n",
    "    model.fit(X_train,Y_train)\n",
    "    Y_pred=model.predict(X_test)\n",
    "    print('Classification Report : ')\n",
    "    print(classification_report(Y_test,Y_pred))\n",
    "    print('Confusion Matrix : ')\n",
    "    print(confusion_matrix(Y_test,Y_pred))\n",
    "    return model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6443d3fd",
   "metadata": {},
   "source": [
    "# Logistic Regression :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "b0a302cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create object for LogisticRegression class :\n",
    "lr=LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "3046e299",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.85      0.86       172\n",
      "           1       0.89      0.91      0.90       230\n",
      "\n",
      "    accuracy                           0.89       402\n",
      "   macro avg       0.88      0.88      0.88       402\n",
      "weighted avg       0.89      0.89      0.89       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[147  25]\n",
      " [ 21 209]]\n"
     ]
    }
   ],
   "source": [
    "#Call the Function :\n",
    "lr=create_model(lr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "3d68720f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#In LogisticRegression we train our model with all the features means there is no feature selection done.\n",
    "#Which results our model is overfitted."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd561087",
   "metadata": {},
   "source": [
    "# Decision Tree :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "3374ddb3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create object for DecisionTree class :\n",
    "dt=DecisionTreeClassifier(random_state=1)    #Bydefault Gini Index method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "12413226",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.98      0.96       172\n",
      "           1       0.98      0.96      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[168   4]\n",
      " [  9 221]]\n"
     ]
    }
   ],
   "source": [
    "#Call the Function :\n",
    "dt=create_model(dt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "f93d6a85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.99      0.99       172\n",
      "           1       1.00      0.98      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.99      0.99      0.99       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[171   1]\n",
      " [  4 226]]\n"
     ]
    }
   ],
   "source": [
    "#Create object for DecisionTree class :\n",
    "dt1=DecisionTreeClassifier(random_state=1,criterion='entropy')\n",
    "#Call the Function :\n",
    "dt1=create_model(dt1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "8f573c54",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Here by applying 'entrophy' method in Decision Tree we get 0.98 accuracy "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "0005d83d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Information Gain :  [0.08676075 0.         0.44899923 0.26837574 0.15667208 0.\n",
      " 0.03919219]\n"
     ]
    }
   ],
   "source": [
    "#Now we check the Information Gain from each input as we train the model with all the inputs :\n",
    "IG=dt1.feature_importances_\n",
    "print('Information Gain : ',IG)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "796d4230",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Input</th>\n",
       "      <th>IG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>bmi</td>\n",
       "      <td>0.448999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>children</td>\n",
       "      <td>0.268376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>smoker</td>\n",
       "      <td>0.156672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>age</td>\n",
       "      <td>0.086761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>charges</td>\n",
       "      <td>0.039192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>sex</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>region</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Input        IG\n",
       "2       bmi  0.448999\n",
       "3  children  0.268376\n",
       "4    smoker  0.156672\n",
       "0       age  0.086761\n",
       "6   charges  0.039192\n",
       "1       sex  0.000000\n",
       "5    region  0.000000"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Create Dictionary :\n",
    "dic={'Input':X.columns,'IG':IG}\n",
    "#Covert the Dictionary into DataFrame :\n",
    "df1=pd.DataFrame(dic)\n",
    "df1.sort_values('IG',ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "2cfb53ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1080x1080 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Create Tree :\n",
    "features=X.columns\n",
    "fig=plt.figure(figsize=(15,15))\n",
    "#_=tree.plot_tree(dt1,feature_names=features,filled=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f6acfa21",
   "metadata": {},
   "outputs": [],
   "source": [
    "#As Decision Tree prone to be overfitting we apply pruning techniques to avoid overfitting."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40f2e757",
   "metadata": {},
   "source": [
    "# Pruning Techniques :"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3c2978b",
   "metadata": {},
   "source": [
    "1.Max_depth Pruning Technique :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "e6b79d7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create object for DecisionTreeClassifier class & pass the parameters :\n",
    "dt2=DecisionTreeClassifier(random_state=1,criterion='entropy',max_depth=6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "3b9e15d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.92      0.94       172\n",
      "           1       0.95      0.97      0.96       230\n",
      "\n",
      "    accuracy                           0.95       402\n",
      "   macro avg       0.95      0.95      0.95       402\n",
      "weighted avg       0.95      0.95      0.95       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[159  13]\n",
      " [  6 224]]\n"
     ]
    }
   ],
   "source": [
    "#Call the Function :\n",
    "dt2=create_model(dt2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0381819d",
   "metadata": {},
   "source": [
    "2.Min_samples_leaf Pruning Technique :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "95ce8496",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"\\nfor i in range(45,101,5):\\n    print('Min Sample Leaf : ',i)\\n    dt2=DecisionTreeClassifier(random_state=1,criterion='entropy',min_samples_leaf=i)\\n    #Call the Function :\\n    dt2=create_model(dt2)\\n    \\n\""
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "for i in range(45,101,5):\n",
    "    print('Min Sample Leaf : ',i)\n",
    "    dt2=DecisionTreeClassifier(random_state=1,criterion='entropy',min_samples_leaf=i)\n",
    "    #Call the Function :\n",
    "    dt2=create_model(dt2)\n",
    "    \n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "8282dc52",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Information Gain :  [0.09524222 0.         0.40486824 0.27930782 0.17644359 0.00510972\n",
      " 0.0390284 ]\n"
     ]
    }
   ],
   "source": [
    "#Information Gain :\n",
    "IG=dt2.feature_importances_\n",
    "print('Information Gain : ',IG)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "15ce82f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Input</th>\n",
       "      <th>IG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>bmi</td>\n",
       "      <td>0.404868</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>children</td>\n",
       "      <td>0.279308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>smoker</td>\n",
       "      <td>0.176444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>age</td>\n",
       "      <td>0.095242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>charges</td>\n",
       "      <td>0.039028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>region</td>\n",
       "      <td>0.005110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>sex</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Input        IG\n",
       "2       bmi  0.404868\n",
       "3  children  0.279308\n",
       "4    smoker  0.176444\n",
       "0       age  0.095242\n",
       "6   charges  0.039028\n",
       "5    region  0.005110\n",
       "1       sex  0.000000"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Create Dictionary :\n",
    "dic={'Input':X.columns,'IG':IG}\n",
    "#Covert the Dictionary into DataFrame :\n",
    "df2=pd.DataFrame(dic)\n",
    "df2.sort_values('IG',ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "4372cb23",
   "metadata": {},
   "outputs": [],
   "source": [
    "#In Decision tree we get 0.97 accuracy by train the model with 6 imporatant features :\n",
    "#By applying 'entropy' method & max_depth pruning technique\n",
    "#Input\tIG\n",
    "#1.bmi = 0.404868\n",
    "#2.children = 0.279308\n",
    "#3.smoker = 0.176444\n",
    "#4.age = 0.095242\n",
    "#5.charges = 0.039028\n",
    "#6.region = 0.005110"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2809d16",
   "metadata": {},
   "source": [
    "# Ensemble Techniques :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "e4da3b3e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#We apply ensemble techniques on 'insurance' dataset to get more accuracy "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3416cb6e",
   "metadata": {},
   "source": [
    "# 1. Random Forest Tree :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "013d35bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No.of Decision Tree :  1\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.90      0.89       172\n",
      "           1       0.92      0.91      0.92       230\n",
      "\n",
      "    accuracy                           0.91       402\n",
      "   macro avg       0.90      0.90      0.90       402\n",
      "weighted avg       0.91      0.91      0.91       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[154  18]\n",
      " [ 20 210]]\n",
      "No.of Decision Tree :  2\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.95      0.90       172\n",
      "           1       0.96      0.87      0.92       230\n",
      "\n",
      "    accuracy                           0.91       402\n",
      "   macro avg       0.91      0.91      0.91       402\n",
      "weighted avg       0.91      0.91      0.91       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[164   8]\n",
      " [ 29 201]]\n",
      "No.of Decision Tree :  3\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.92      0.93       172\n",
      "           1       0.94      0.96      0.95       230\n",
      "\n",
      "    accuracy                           0.94       402\n",
      "   macro avg       0.94      0.94      0.94       402\n",
      "weighted avg       0.94      0.94      0.94       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[159  13]\n",
      " [ 10 220]]\n",
      "No.of Decision Tree :  4\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.95      0.92       172\n",
      "           1       0.96      0.90      0.93       230\n",
      "\n",
      "    accuracy                           0.93       402\n",
      "   macro avg       0.92      0.93      0.92       402\n",
      "weighted avg       0.93      0.93      0.93       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[164   8]\n",
      " [ 22 208]]\n",
      "No.of Decision Tree :  5\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.97      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[164   8]\n",
      " [  7 223]]\n",
      "No.of Decision Tree :  6\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.97      0.95       172\n",
      "           1       0.97      0.96      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[166   6]\n",
      " [ 10 220]]\n",
      "No.of Decision Tree :  7\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.95       172\n",
      "           1       0.96      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  7 223]]\n",
      "No.of Decision Tree :  8\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.95      0.95       172\n",
      "           1       0.97      0.96      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[164   8]\n",
      " [  9 221]]\n",
      "No.of Decision Tree :  9\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.94      0.96       172\n",
      "           1       0.96      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[162  10]\n",
      " [  5 225]]\n",
      "No.of Decision Tree :  10\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.96      0.95       172\n",
      "           1       0.97      0.96      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  9 221]]\n",
      "No.of Decision Tree :  11\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.96      0.96       172\n",
      "           1       0.97      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  8 222]]\n",
      "No.of Decision Tree :  12\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.96      0.95       172\n",
      "           1       0.97      0.96      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  9 221]]\n",
      "No.of Decision Tree :  13\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.95      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[164   8]\n",
      " [  5 225]]\n",
      "No.of Decision Tree :  14\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.96      0.96       172\n",
      "           1       0.97      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  6 224]]\n",
      "No.of Decision Tree :  15\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.95      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[164   8]\n",
      " [  4 226]]\n",
      "No.of Decision Tree :  16\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  5 225]]\n",
      "No.of Decision Tree :  17\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.96      0.97       172\n",
      "           1       0.97      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  4 226]]\n",
      "No.of Decision Tree :  18\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.96      0.97       172\n",
      "           1       0.97      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  4 226]]\n",
      "No.of Decision Tree :  19\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.96      0.97       172\n",
      "           1       0.97      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  4 226]]\n",
      "No.of Decision Tree :  20\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.96      0.97       172\n",
      "           1       0.97      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  4 226]]\n",
      "No.of Decision Tree :  21\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.96      0.97       172\n",
      "           1       0.97      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  4 226]]\n",
      "No.of Decision Tree :  22\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.96      0.97       172\n",
      "           1       0.97      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  4 226]]\n",
      "No.of Decision Tree :  23\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.95      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[164   8]\n",
      " [  4 226]]\n",
      "No.of Decision Tree :  24\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  5 225]]\n",
      "No.of Decision Tree :  25\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.96      0.97       172\n",
      "           1       0.97      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  4 226]]\n",
      "No.of Decision Tree :  26\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.96      0.97       172\n",
      "           1       0.97      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  4 226]]\n",
      "No.of Decision Tree :  27\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.96      0.97       172\n",
      "           1       0.97      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  4 226]]\n",
      "No.of Decision Tree :  28\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.96      0.96       172\n",
      "           1       0.97      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  6 224]]\n",
      "No.of Decision Tree :  29\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.96      0.97       172\n",
      "           1       0.97      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  4 226]]\n",
      "No.of Decision Tree :  30\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.96      0.96       172\n",
      "           1       0.97      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  6 224]]\n",
      "No.of Decision Tree :  31\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.96      0.97       172\n",
      "           1       0.97      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  4 226]]\n",
      "No.of Decision Tree :  32\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  5 225]]\n",
      "No.of Decision Tree :  33\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.96      0.97       172\n",
      "           1       0.97      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  4 226]]\n",
      "No.of Decision Tree :  34\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.96      0.97       172\n",
      "           1       0.97      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  4 226]]\n",
      "No.of Decision Tree :  35\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.96      0.97       172\n",
      "           1       0.97      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  4 226]]\n",
      "No.of Decision Tree :  36\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.96      0.97       172\n",
      "           1       0.97      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  4 226]]\n",
      "No.of Decision Tree :  37\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.96      0.97       172\n",
      "           1       0.97      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  4 226]]\n",
      "No.of Decision Tree :  38\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  5 225]]\n",
      "No.of Decision Tree :  39\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  5 225]]\n",
      "No.of Decision Tree :  40\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  5 225]]\n",
      "No.of Decision Tree :  41\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  5 225]]\n",
      "No.of Decision Tree :  42\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  5 225]]\n",
      "No.of Decision Tree :  43\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  5 225]]\n",
      "No.of Decision Tree :  44\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  5 225]]\n",
      "No.of Decision Tree :  45\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  5 225]]\n",
      "No.of Decision Tree :  46\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  5 225]]\n",
      "No.of Decision Tree :  47\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  5 225]]\n",
      "No.of Decision Tree :  48\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  5 225]]\n",
      "No.of Decision Tree :  49\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  5 225]]\n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "#Selection of n_estimators & max_features :\n",
    "\n",
    "for i in range(1,50):\n",
    "    rfc=RandomForestClassifier(n_estimators=i,max_features=4,random_state=1)\n",
    "    #Call the Function :\n",
    "    print('No.of Decision Tree : ',i)\n",
    "    rfc=create_model(rfc)\n",
    "\n",
    "'''\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "ca68e6c7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.95       172\n",
      "           1       0.96      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  7 223]]\n"
     ]
    }
   ],
   "source": [
    "#Create object for RandomForestClassifier class :\n",
    "rfc=RandomForestClassifier(n_estimators=7,max_features=4,random_state=1)\n",
    "#Call the function :\n",
    "rfc=create_model(rfc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "178399d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Input</th>\n",
       "      <th>IG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>bmi</td>\n",
       "      <td>0.357254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>children</td>\n",
       "      <td>0.300613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>charges</td>\n",
       "      <td>0.162837</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>smoker</td>\n",
       "      <td>0.091280</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>age</td>\n",
       "      <td>0.068369</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>sex</td>\n",
       "      <td>0.010040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>region</td>\n",
       "      <td>0.009607</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Input        IG\n",
       "2       bmi  0.357254\n",
       "3  children  0.300613\n",
       "6   charges  0.162837\n",
       "4    smoker  0.091280\n",
       "0       age  0.068369\n",
       "1       sex  0.010040\n",
       "5    region  0.009607"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Information Gain :\n",
    "IG=rfc.feature_importances_\n",
    "dic={'Input':X.columns,'IG':IG}\n",
    "df3=pd.DataFrame(dic)\n",
    "df3.sort_values('IG',ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "967d7461",
   "metadata": {},
   "outputs": [],
   "source": [
    "#In RandomForestClassifier we get 0.97 accuracy by train the model with 7 decision trees & 4 max_features.\n",
    "#Important features are :\n",
    "#1.bmi = 0.357254\n",
    "#2.children = 0.300613\n",
    "#3.charges = 0.162837\n",
    "#4.smoker = 0.091280\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb00d1df",
   "metadata": {},
   "source": [
    "# 2.Boosting Techniques :"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74a72047",
   "metadata": {},
   "source": [
    "A] ADA Boosting :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "1b5f943f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No. of Features :  1\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.47      0.59       172\n",
      "           1       0.70      0.92      0.79       230\n",
      "\n",
      "    accuracy                           0.73       402\n",
      "   macro avg       0.76      0.69      0.69       402\n",
      "weighted avg       0.75      0.73      0.71       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[ 80  92]\n",
      " [ 18 212]]\n",
      "No. of Features :  2\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.23      0.35       172\n",
      "           1       0.62      0.95      0.75       230\n",
      "\n",
      "    accuracy                           0.64       402\n",
      "   macro avg       0.69      0.59      0.55       402\n",
      "weighted avg       0.68      0.64      0.58       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[ 39 133]\n",
      " [ 12 218]]\n",
      "No. of Features :  3\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.67      0.73      0.70       172\n",
      "           1       0.78      0.73      0.76       230\n",
      "\n",
      "    accuracy                           0.73       402\n",
      "   macro avg       0.72      0.73      0.73       402\n",
      "weighted avg       0.73      0.73      0.73       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[125  47]\n",
      " [ 62 168]]\n",
      "No. of Features :  4\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.65      0.74       172\n",
      "           1       0.78      0.92      0.84       230\n",
      "\n",
      "    accuracy                           0.81       402\n",
      "   macro avg       0.82      0.79      0.79       402\n",
      "weighted avg       0.81      0.81      0.80       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[112  60]\n",
      " [ 18 212]]\n",
      "No. of Features :  5\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      0.74      0.77       172\n",
      "           1       0.82      0.86      0.84       230\n",
      "\n",
      "    accuracy                           0.81       402\n",
      "   macro avg       0.81      0.80      0.81       402\n",
      "weighted avg       0.81      0.81      0.81       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[128  44]\n",
      " [ 32 198]]\n",
      "No. of Features :  6\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.69      0.76       172\n",
      "           1       0.80      0.91      0.85       230\n",
      "\n",
      "    accuracy                           0.82       402\n",
      "   macro avg       0.83      0.80      0.81       402\n",
      "weighted avg       0.82      0.82      0.81       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[118  54]\n",
      " [ 20 210]]\n",
      "No. of Features :  7\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.79      0.82       172\n",
      "           1       0.85      0.90      0.88       230\n",
      "\n",
      "    accuracy                           0.85       402\n",
      "   macro avg       0.85      0.85      0.85       402\n",
      "weighted avg       0.85      0.85      0.85       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[136  36]\n",
      " [ 23 207]]\n"
     ]
    }
   ],
   "source": [
    "#Selection of n_estimators :\n",
    "'''\n",
    "for i in range(1,8):\n",
    "    ada=AdaBoostClassifier(n_estimators=i,random_state=1)\n",
    "    #Call the Function :\n",
    "    print('No. of Features : ',i)\n",
    "    ada=create_model(ada)\n",
    "\n",
    "'''\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "e3e4d844",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.67      0.73      0.70       172\n",
      "           1       0.78      0.73      0.76       230\n",
      "\n",
      "    accuracy                           0.73       402\n",
      "   macro avg       0.72      0.73      0.73       402\n",
      "weighted avg       0.73      0.73      0.73       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[125  47]\n",
      " [ 62 168]]\n"
     ]
    }
   ],
   "source": [
    "#Create object for AdaBoostClassifier class :\n",
    "ada=AdaBoostClassifier(n_estimators=3,random_state=1)\n",
    "#Call the Function :\n",
    "ada=create_model(ada)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "7ce70362",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Input</th>\n",
       "      <th>IG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>bmi</td>\n",
       "      <td>0.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>children</td>\n",
       "      <td>0.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>smoker</td>\n",
       "      <td>0.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>age</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>sex</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>region</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>charges</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Input    IG\n",
       "2       bmi  0.50\n",
       "3  children  0.25\n",
       "4    smoker  0.25\n",
       "0       age  0.00\n",
       "1       sex  0.00\n",
       "5    region  0.00\n",
       "6   charges  0.00"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Information Gain :\n",
    "IG=ada.feature_importances_\n",
    "dic={'Input':X.columns,'IG':IG}\n",
    "df3=pd.DataFrame(dic)\n",
    "df3.sort_values('IG',ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "55c4f126",
   "metadata": {},
   "outputs": [],
   "source": [
    "#ADA boosting is better for unstructured data which includes images"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31a12061",
   "metadata": {},
   "source": [
    "B] Gradiant Boosting :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "e5a12631",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No. of n_estimators :  1\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00       172\n",
      "           1       0.57      1.00      0.73       230\n",
      "\n",
      "    accuracy                           0.57       402\n",
      "   macro avg       0.29      0.50      0.36       402\n",
      "weighted avg       0.33      0.57      0.42       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[  0 172]\n",
      " [  0 230]]\n",
      "No. of n_estimators :  2\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.44      0.60       172\n",
      "           1       0.70      0.99      0.82       230\n",
      "\n",
      "    accuracy                           0.75       402\n",
      "   macro avg       0.83      0.71      0.71       402\n",
      "weighted avg       0.81      0.75      0.73       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[ 75  97]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  3\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.44      0.60       172\n",
      "           1       0.70      0.99      0.82       230\n",
      "\n",
      "    accuracy                           0.75       402\n",
      "   macro avg       0.83      0.71      0.71       402\n",
      "weighted avg       0.81      0.75      0.73       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[ 75  97]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  4\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.73      0.80       172\n",
      "           1       0.82      0.93      0.87       230\n",
      "\n",
      "    accuracy                           0.84       402\n",
      "   macro avg       0.85      0.83      0.83       402\n",
      "weighted avg       0.85      0.84      0.84       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[125  47]\n",
      " [ 17 213]]\n",
      "No. of n_estimators :  5\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.70      0.80       172\n",
      "           1       0.81      0.97      0.88       230\n",
      "\n",
      "    accuracy                           0.85       402\n",
      "   macro avg       0.88      0.83      0.84       402\n",
      "weighted avg       0.87      0.85      0.85       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[120  52]\n",
      " [  7 223]]\n",
      "No. of n_estimators :  6\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.70      0.81       172\n",
      "           1       0.81      0.97      0.88       230\n",
      "\n",
      "    accuracy                           0.86       402\n",
      "   macro avg       0.88      0.84      0.85       402\n",
      "weighted avg       0.87      0.86      0.85       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[121  51]\n",
      " [  7 223]]\n",
      "No. of n_estimators :  7\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.75      0.81       172\n",
      "           1       0.83      0.92      0.87       230\n",
      "\n",
      "    accuracy                           0.85       402\n",
      "   macro avg       0.85      0.83      0.84       402\n",
      "weighted avg       0.85      0.85      0.84       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[129  43]\n",
      " [ 19 211]]\n",
      "No. of n_estimators :  8\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.90      0.90       172\n",
      "           1       0.93      0.93      0.93       230\n",
      "\n",
      "    accuracy                           0.92       402\n",
      "   macro avg       0.91      0.91      0.91       402\n",
      "weighted avg       0.92      0.92      0.92       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[155  17]\n",
      " [ 17 213]]\n",
      "No. of n_estimators :  9\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.91      0.90       172\n",
      "           1       0.93      0.93      0.93       230\n",
      "\n",
      "    accuracy                           0.92       402\n",
      "   macro avg       0.92      0.92      0.92       402\n",
      "weighted avg       0.92      0.92      0.92       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[156  16]\n",
      " [ 17 213]]\n",
      "No. of n_estimators :  10\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.91      0.90       172\n",
      "           1       0.93      0.93      0.93       230\n",
      "\n",
      "    accuracy                           0.92       402\n",
      "   macro avg       0.92      0.92      0.92       402\n",
      "weighted avg       0.92      0.92      0.92       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[156  16]\n",
      " [ 17 213]]\n",
      "No. of n_estimators :  11\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.91      0.91       172\n",
      "           1       0.93      0.93      0.93       230\n",
      "\n",
      "    accuracy                           0.92       402\n",
      "   macro avg       0.92      0.92      0.92       402\n",
      "weighted avg       0.92      0.92      0.92       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[157  15]\n",
      " [ 17 213]]\n",
      "No. of n_estimators :  12\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.92      0.91       172\n",
      "           1       0.94      0.93      0.93       230\n",
      "\n",
      "    accuracy                           0.92       402\n",
      "   macro avg       0.92      0.92      0.92       402\n",
      "weighted avg       0.92      0.92      0.92       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[158  14]\n",
      " [ 17 213]]\n",
      "No. of n_estimators :  13\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.94      0.92       172\n",
      "           1       0.96      0.93      0.94       230\n",
      "\n",
      "    accuracy                           0.93       402\n",
      "   macro avg       0.93      0.93      0.93       402\n",
      "weighted avg       0.93      0.93      0.93       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[162  10]\n",
      " [ 17 213]]\n",
      "No. of n_estimators :  14\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.93      0.92       172\n",
      "           1       0.95      0.93      0.94       230\n",
      "\n",
      "    accuracy                           0.93       402\n",
      "   macro avg       0.93      0.93      0.93       402\n",
      "weighted avg       0.93      0.93      0.93       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[160  12]\n",
      " [ 17 213]]\n",
      "No. of n_estimators :  15\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.93      0.92       172\n",
      "           1       0.95      0.93      0.94       230\n",
      "\n",
      "    accuracy                           0.93       402\n",
      "   macro avg       0.93      0.93      0.93       402\n",
      "weighted avg       0.93      0.93      0.93       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[160  12]\n",
      " [ 17 213]]\n",
      "No. of n_estimators :  16\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.94      0.92       172\n",
      "           1       0.96      0.93      0.94       230\n",
      "\n",
      "    accuracy                           0.93       402\n",
      "   macro avg       0.93      0.93      0.93       402\n",
      "weighted avg       0.93      0.93      0.93       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[162  10]\n",
      " [ 17 213]]\n",
      "No. of n_estimators :  17\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.94      0.92       172\n",
      "           1       0.95      0.92      0.94       230\n",
      "\n",
      "    accuracy                           0.93       402\n",
      "   macro avg       0.93      0.93      0.93       402\n",
      "weighted avg       0.93      0.93      0.93       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[161  11]\n",
      " [ 18 212]]\n",
      "No. of n_estimators :  18\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.94      0.92       172\n",
      "           1       0.95      0.93      0.94       230\n",
      "\n",
      "    accuracy                           0.93       402\n",
      "   macro avg       0.93      0.93      0.93       402\n",
      "weighted avg       0.93      0.93      0.93       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[161  11]\n",
      " [ 17 213]]\n",
      "No. of n_estimators :  19\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.94      0.93       172\n",
      "           1       0.95      0.95      0.95       230\n",
      "\n",
      "    accuracy                           0.94       402\n",
      "   macro avg       0.94      0.94      0.94       402\n",
      "weighted avg       0.94      0.94      0.94       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[161  11]\n",
      " [ 12 218]]\n",
      "No. of n_estimators :  20\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.95      0.92       172\n",
      "           1       0.96      0.92      0.94       230\n",
      "\n",
      "    accuracy                           0.93       402\n",
      "   macro avg       0.93      0.93      0.93       402\n",
      "weighted avg       0.93      0.93      0.93       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [ 18 212]]\n",
      "No. of n_estimators :  21\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.93      0.93       172\n",
      "           1       0.95      0.95      0.95       230\n",
      "\n",
      "    accuracy                           0.94       402\n",
      "   macro avg       0.94      0.94      0.94       402\n",
      "weighted avg       0.94      0.94      0.94       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[160  12]\n",
      " [ 12 218]]\n",
      "No. of n_estimators :  22\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.94      0.93       172\n",
      "           1       0.95      0.93      0.94       230\n",
      "\n",
      "    accuracy                           0.94       402\n",
      "   macro avg       0.93      0.94      0.93       402\n",
      "weighted avg       0.94      0.94      0.94       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[161  11]\n",
      " [ 15 215]]\n",
      "No. of n_estimators :  23\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.94      0.93       172\n",
      "           1       0.95      0.93      0.94       230\n",
      "\n",
      "    accuracy                           0.94       402\n",
      "   macro avg       0.93      0.94      0.93       402\n",
      "weighted avg       0.94      0.94      0.94       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[161  11]\n",
      " [ 15 215]]\n",
      "No. of n_estimators :  24\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.94      0.93       172\n",
      "           1       0.95      0.93      0.94       230\n",
      "\n",
      "    accuracy                           0.94       402\n",
      "   macro avg       0.93      0.94      0.93       402\n",
      "weighted avg       0.94      0.94      0.94       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[161  11]\n",
      " [ 15 215]]\n",
      "No. of n_estimators :  25\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.94      0.93       172\n",
      "           1       0.95      0.93      0.94       230\n",
      "\n",
      "    accuracy                           0.94       402\n",
      "   macro avg       0.93      0.94      0.93       402\n",
      "weighted avg       0.94      0.94      0.94       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[161  11]\n",
      " [ 15 215]]\n",
      "No. of n_estimators :  26\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.94      0.93       172\n",
      "           1       0.95      0.93      0.94       230\n",
      "\n",
      "    accuracy                           0.94       402\n",
      "   macro avg       0.93      0.94      0.93       402\n",
      "weighted avg       0.94      0.94      0.94       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[161  11]\n",
      " [ 15 215]]\n",
      "No. of n_estimators :  27\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.94      0.93       172\n",
      "           1       0.95      0.93      0.94       230\n",
      "\n",
      "    accuracy                           0.94       402\n",
      "   macro avg       0.93      0.94      0.93       402\n",
      "weighted avg       0.94      0.94      0.94       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[161  11]\n",
      " [ 15 215]]\n",
      "No. of n_estimators :  28\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.95      0.93       172\n",
      "           1       0.96      0.93      0.95       230\n",
      "\n",
      "    accuracy                           0.94       402\n",
      "   macro avg       0.94      0.94      0.94       402\n",
      "weighted avg       0.94      0.94      0.94       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [ 15 215]]\n",
      "No. of n_estimators :  29\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.95      0.93       172\n",
      "           1       0.96      0.93      0.95       230\n",
      "\n",
      "    accuracy                           0.94       402\n",
      "   macro avg       0.94      0.94      0.94       402\n",
      "weighted avg       0.94      0.94      0.94       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [ 15 215]]\n",
      "No. of n_estimators :  30\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.94      0.93       172\n",
      "           1       0.95      0.93      0.94       230\n",
      "\n",
      "    accuracy                           0.94       402\n",
      "   macro avg       0.93      0.94      0.93       402\n",
      "weighted avg       0.94      0.94      0.94       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[161  11]\n",
      " [ 15 215]]\n",
      "No. of n_estimators :  31\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.95      0.93       172\n",
      "           1       0.96      0.93      0.95       230\n",
      "\n",
      "    accuracy                           0.94       402\n",
      "   macro avg       0.94      0.94      0.94       402\n",
      "weighted avg       0.94      0.94      0.94       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [ 15 215]]\n",
      "No. of n_estimators :  32\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.95      0.94       172\n",
      "           1       0.96      0.95      0.96       230\n",
      "\n",
      "    accuracy                           0.95       402\n",
      "   macro avg       0.95      0.95      0.95       402\n",
      "weighted avg       0.95      0.95      0.95       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[164   8]\n",
      " [ 12 218]]\n",
      "No. of n_estimators :  33\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.95      0.94       172\n",
      "           1       0.96      0.96      0.96       230\n",
      "\n",
      "    accuracy                           0.95       402\n",
      "   macro avg       0.95      0.95      0.95       402\n",
      "weighted avg       0.95      0.95      0.95       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [ 10 220]]\n",
      "No. of n_estimators :  34\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.95      0.94       172\n",
      "           1       0.96      0.96      0.96       230\n",
      "\n",
      "    accuracy                           0.95       402\n",
      "   macro avg       0.95      0.95      0.95       402\n",
      "weighted avg       0.95      0.95      0.95       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [ 10 220]]\n",
      "No. of n_estimators :  35\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.95      0.95       172\n",
      "           1       0.97      0.96      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[164   8]\n",
      " [  9 221]]\n",
      "No. of n_estimators :  36\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.95      0.95       172\n",
      "           1       0.97      0.96      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[164   8]\n",
      " [  9 221]]\n",
      "No. of n_estimators :  37\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.95      0.95       172\n",
      "           1       0.97      0.96      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[164   8]\n",
      " [  9 221]]\n",
      "No. of n_estimators :  38\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.95      0.95       172\n",
      "           1       0.97      0.96      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[164   8]\n",
      " [  9 221]]\n",
      "No. of n_estimators :  39\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.95      0.95       172\n",
      "           1       0.96      0.96      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.95      0.95      0.95       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  9 221]]\n",
      "No. of n_estimators :  40\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.95      0.95       172\n",
      "           1       0.96      0.96      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.95      0.95      0.95       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  9 221]]\n",
      "No. of n_estimators :  41\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.95      0.95       172\n",
      "           1       0.96      0.96      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.95      0.95      0.95       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  9 221]]\n",
      "No. of n_estimators :  42\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.95      0.95       172\n",
      "           1       0.96      0.96      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.95      0.95      0.95       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  9 221]]\n",
      "No. of n_estimators :  43\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.95      0.95       172\n",
      "           1       0.97      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[164   8]\n",
      " [  8 222]]\n",
      "No. of n_estimators :  44\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.95      0.95       172\n",
      "           1       0.97      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[164   8]\n",
      " [  8 222]]\n",
      "No. of n_estimators :  45\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.95      0.95       172\n",
      "           1       0.96      0.97      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  8 222]]\n",
      "No. of n_estimators :  46\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.94      0.95       172\n",
      "           1       0.96      0.97      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.95      0.95      0.95       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[162  10]\n",
      " [  8 222]]\n",
      "No. of n_estimators :  47\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.94      0.95       172\n",
      "           1       0.96      0.97      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[162  10]\n",
      " [  7 223]]\n",
      "No. of n_estimators :  48\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.94      0.95       172\n",
      "           1       0.96      0.97      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.95      0.95      0.95       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[162  10]\n",
      " [  8 222]]\n",
      "No. of n_estimators :  49\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.94      0.95       172\n",
      "           1       0.96      0.97      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[162  10]\n",
      " [  7 223]]\n",
      "No. of n_estimators :  50\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.94      0.95       172\n",
      "           1       0.95      0.97      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.95      0.95       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[161  11]\n",
      " [  7 223]]\n",
      "No. of n_estimators :  51\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.94      0.95       172\n",
      "           1       0.95      0.97      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.95      0.95       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[161  11]\n",
      " [  7 223]]\n",
      "No. of n_estimators :  52\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.94      0.95       172\n",
      "           1       0.95      0.97      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.95      0.95       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[161  11]\n",
      " [  7 223]]\n",
      "No. of n_estimators :  53\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.94      0.95       172\n",
      "           1       0.95      0.97      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.95      0.95       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[161  11]\n",
      " [  7 223]]\n",
      "No. of n_estimators :  54\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.94      0.95       172\n",
      "           1       0.95      0.97      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.95      0.95       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[161  11]\n",
      " [  7 223]]\n",
      "No. of n_estimators :  55\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.94      0.95       172\n",
      "           1       0.95      0.97      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.95      0.95       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[161  11]\n",
      " [  7 223]]\n",
      "No. of n_estimators :  56\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.94      0.95       172\n",
      "           1       0.95      0.97      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.95      0.95       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[161  11]\n",
      " [  7 223]]\n",
      "No. of n_estimators :  57\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.96      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  58\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.96      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  59\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.96      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  60\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.96      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  61\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.96      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  62\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.96      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  63\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.96      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  64\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.96      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  65\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.96      0.96       172\n",
      "           1       0.97      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  66\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.97      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.96      0.96       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[164   8]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  67\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.97      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.96      0.96       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[164   8]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  68\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.96      0.96       172\n",
      "           1       0.97      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  69\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.97      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.96      0.96       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[164   8]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  70\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.96      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  71\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.96      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  72\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.96      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  73\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.96      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  74\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.96      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  75\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.96      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  76\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.96      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  77\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.97      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.96      0.96       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[164   8]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  78\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.95      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[164   8]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  79\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.97      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.96      0.96       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[164   8]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  80\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.96      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  81\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.95      0.96       172\n",
      "           1       0.96      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.96      0.96       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  82\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.95      0.96       172\n",
      "           1       0.96      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.96      0.96       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  83\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       172\n",
      "           1       0.96      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  84\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.95      0.96       172\n",
      "           1       0.96      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.96      0.96       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  85\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.95      0.96       172\n",
      "           1       0.96      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.96      0.96       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  86\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.95      0.96       172\n",
      "           1       0.96      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.96      0.96       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  87\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.95      0.96       172\n",
      "           1       0.96      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.96      0.96       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  88\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.95      0.96       172\n",
      "           1       0.96      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.96      0.96       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  89\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.95      0.96       172\n",
      "           1       0.96      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.96      0.96       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  90\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.95      0.96       172\n",
      "           1       0.96      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.96      0.96       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  91\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.95      0.96       172\n",
      "           1       0.96      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.96      0.96       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  92\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.95      0.96       172\n",
      "           1       0.96      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.96      0.96       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  93\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.95      0.96       172\n",
      "           1       0.96      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.96      0.96       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[163   9]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  94\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  95\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  96\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  97\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  98\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  99\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.96       172\n",
      "           1       0.97      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  100\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.97      0.97       172\n",
      "           1       0.97      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[166   6]\n",
      " [  5 225]]\n"
     ]
    }
   ],
   "source": [
    "#Selection of n_estimators :\n",
    "\n",
    "'''\n",
    "for i in range(1,101):\n",
    "    gbc=GradientBoostingClassifier(n_estimators=i,random_state=1)\n",
    "    #Call the Function :\n",
    "    print('No. of n_estimators : ',i)\n",
    "    gbc=create_model(gbc)\n",
    "\n",
    "\n",
    "'''\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "99a9637d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.90      0.90       172\n",
      "           1       0.93      0.93      0.93       230\n",
      "\n",
      "    accuracy                           0.92       402\n",
      "   macro avg       0.91      0.91      0.91       402\n",
      "weighted avg       0.92      0.92      0.92       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[155  17]\n",
      " [ 17 213]]\n"
     ]
    }
   ],
   "source": [
    "#Create object for GradientBoostingClassifier class :\n",
    "gbc=GradientBoostingClassifier(n_estimators=8,random_state=1)\n",
    "#Call the Function :\n",
    "gbc=create_model(gbc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "acd9b51a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Input</th>\n",
       "      <th>IG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>children</td>\n",
       "      <td>0.376363</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>bmi</td>\n",
       "      <td>0.310226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>smoker</td>\n",
       "      <td>0.245471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>charges</td>\n",
       "      <td>0.063899</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>age</td>\n",
       "      <td>0.004041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>sex</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>region</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Input        IG\n",
       "3  children  0.376363\n",
       "2       bmi  0.310226\n",
       "4    smoker  0.245471\n",
       "6   charges  0.063899\n",
       "0       age  0.004041\n",
       "1       sex  0.000000\n",
       "5    region  0.000000"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Information Gain :\n",
    "IG=gbc.feature_importances_\n",
    "dic={'Input':X.columns,'IG':IG}\n",
    "df3=pd.DataFrame(dic)\n",
    "df3.sort_values('IG',ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe442d95",
   "metadata": {},
   "outputs": [],
   "source": [
    "#By applying Gradient Boosting we get 0.93 accuracy & n_estimators are 8.\n",
    "#But there is better version of gradient boosting called Exstreme Gradient Boosting which deals with missing value , outliers \n",
    "#& take less memory space."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "540c90fe",
   "metadata": {},
   "source": [
    "C] Exstreme Gradient Boosting :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "018dff8d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: xgboost in c:\\users\\siddhesh\\anaconda3\\lib\\site-packages (1.6.1)\n",
      "Requirement already satisfied: scipy in c:\\users\\siddhesh\\anaconda3\\lib\\site-packages (from xgboost) (1.7.1)\n",
      "Requirement already satisfied: numpy in c:\\users\\siddhesh\\anaconda3\\lib\\site-packages (from xgboost) (1.20.3)\n"
     ]
    }
   ],
   "source": [
    "#!pip install xgboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "dd56f8b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No. of n_estimators :  1\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.87      0.90       172\n",
      "           1       0.91      0.94      0.93       230\n",
      "\n",
      "    accuracy                           0.91       402\n",
      "   macro avg       0.91      0.91      0.91       402\n",
      "weighted avg       0.91      0.91      0.91       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[150  22]\n",
      " [ 13 217]]\n",
      "No. of n_estimators :  2\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.93      0.95       172\n",
      "           1       0.95      0.98      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.95      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[160  12]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  3\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.94      0.95       172\n",
      "           1       0.95      0.98      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[161  11]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  4\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.94      0.93       172\n",
      "           1       0.95      0.94      0.95       230\n",
      "\n",
      "    accuracy                           0.94       402\n",
      "   macro avg       0.94      0.94      0.94       402\n",
      "weighted avg       0.94      0.94      0.94       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[161  11]\n",
      " [ 13 217]]\n",
      "No. of n_estimators :  5\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.94      0.94       172\n",
      "           1       0.96      0.95      0.95       230\n",
      "\n",
      "    accuracy                           0.95       402\n",
      "   macro avg       0.94      0.94      0.94       402\n",
      "weighted avg       0.95      0.95      0.95       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[162  10]\n",
      " [ 12 218]]\n",
      "No. of n_estimators :  6\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.94      0.94       172\n",
      "           1       0.96      0.95      0.95       230\n",
      "\n",
      "    accuracy                           0.95       402\n",
      "   macro avg       0.94      0.94      0.94       402\n",
      "weighted avg       0.95      0.95      0.95       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[162  10]\n",
      " [ 12 218]]\n",
      "No. of n_estimators :  7\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.96      0.95       172\n",
      "           1       0.97      0.96      0.97       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [  9 221]]\n",
      "No. of n_estimators :  8\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.96      0.95       172\n",
      "           1       0.97      0.95      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.95      0.96      0.95       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [ 11 219]]\n",
      "No. of n_estimators :  9\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.96      0.95       172\n",
      "           1       0.97      0.96      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [ 10 220]]\n",
      "No. of n_estimators :  10\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.96      0.95       172\n",
      "           1       0.97      0.95      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.95      0.96      0.95       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [ 11 219]]\n",
      "No. of n_estimators :  11\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.96      0.95       172\n",
      "           1       0.97      0.96      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [ 10 220]]\n",
      "No. of n_estimators :  12\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.96      0.95       172\n",
      "           1       0.97      0.96      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [ 10 220]]\n",
      "No. of n_estimators :  13\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.96      0.95       172\n",
      "           1       0.97      0.96      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [ 10 220]]\n",
      "No. of n_estimators :  14\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.97      0.95       172\n",
      "           1       0.97      0.96      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[166   6]\n",
      " [ 10 220]]\n",
      "No. of n_estimators :  15\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.97      0.96       172\n",
      "           1       0.98      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[167   5]\n",
      " [  8 222]]\n",
      "No. of n_estimators :  16\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.97      0.96       172\n",
      "           1       0.98      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[167   5]\n",
      " [  8 222]]\n",
      "No. of n_estimators :  17\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.97      0.96       172\n",
      "           1       0.98      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[167   5]\n",
      " [  8 222]]\n",
      "No. of n_estimators :  18\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.97      0.97       172\n",
      "           1       0.98      0.97      0.97       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[167   5]\n",
      " [  7 223]]\n",
      "No. of n_estimators :  19\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.98      0.97       172\n",
      "           1       0.99      0.97      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.97      0.98      0.97       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  7 223]]\n",
      "No. of n_estimators :  20\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.98      0.97       172\n",
      "           1       0.99      0.97      0.98       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  8 222]]\n",
      "No. of n_estimators :  21\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.98      0.97       172\n",
      "           1       0.99      0.97      0.98       230\n",
      "\n",
      "    accuracy                           0.97       402\n",
      "   macro avg       0.97      0.97      0.97       402\n",
      "weighted avg       0.97      0.97      0.97       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  8 222]]\n",
      "No. of n_estimators :  22\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.98      0.97       172\n",
      "           1       0.99      0.97      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.97      0.98      0.97       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  7 223]]\n",
      "No. of n_estimators :  23\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.98      0.97       172\n",
      "           1       0.99      0.97      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  24\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.98      0.97       172\n",
      "           1       0.99      0.97      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  25\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.98      0.97       172\n",
      "           1       0.99      0.97      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  26\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  27\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  28\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.98      0.97       172\n",
      "           1       0.99      0.97      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  29\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.98      0.97       172\n",
      "           1       0.99      0.97      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  6 224]]\n",
      "No. of n_estimators :  30\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  31\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  32\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  5 225]]\n",
      "No. of n_estimators :  33\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  34\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  35\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  36\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  37\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  38\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  39\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  40\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  41\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  42\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  43\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  44\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  45\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  46\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  47\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  48\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  49\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  50\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  51\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  52\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  53\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  54\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  55\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  56\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  57\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.98      0.98       230\n",
      "\n",
      "    accuracy                           0.98       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.98      0.98      0.98       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  4 226]]\n",
      "No. of n_estimators :  58\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  59\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  60\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  61\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  62\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  63\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  64\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  65\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  66\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  67\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  68\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  69\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  70\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  71\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  72\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  73\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  74\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  75\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  76\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  77\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  78\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  79\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  80\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  81\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  82\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  83\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  84\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  85\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  86\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  87\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  88\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  89\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  90\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  91\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  92\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  93\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  94\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  95\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  96\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  97\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  98\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  99\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n",
      "No. of n_estimators :  100\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       172\n",
      "           1       0.99      0.99      0.99       230\n",
      "\n",
      "    accuracy                           0.99       402\n",
      "   macro avg       0.98      0.98      0.98       402\n",
      "weighted avg       0.99      0.99      0.99       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[169   3]\n",
      " [  3 227]]\n"
     ]
    }
   ],
   "source": [
    "#Selection of n_estimators :\n",
    "'''\n",
    "for i in range(1,101):\n",
    "    xgb=XGBClassifier(random_state=1,n_estimators=i,reg_alpha=1)\n",
    "    #Call the Function :\n",
    "    print('No. of n_estimators : ',i)\n",
    "    xgb=create_model(xgb)\n",
    "\n",
    "\n",
    "'''\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "ce77c978",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.96      0.95       172\n",
      "           1       0.97      0.96      0.96       230\n",
      "\n",
      "    accuracy                           0.96       402\n",
      "   macro avg       0.96      0.96      0.96       402\n",
      "weighted avg       0.96      0.96      0.96       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[165   7]\n",
      " [ 10 220]]\n"
     ]
    }
   ],
   "source": [
    "#Create object for XGBClassifier :\n",
    "xgb=XGBClassifier(random_state=1,n_estimators=9,reg_alpha=1)\n",
    "#Call the Function :\n",
    "xgb=create_model(xgb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "1cde2ace",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Input</th>\n",
       "      <th>IG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>smoker</td>\n",
       "      <td>0.382378</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>children</td>\n",
       "      <td>0.284768</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>bmi</td>\n",
       "      <td>0.169715</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>age</td>\n",
       "      <td>0.091391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>charges</td>\n",
       "      <td>0.047931</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>sex</td>\n",
       "      <td>0.023736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>region</td>\n",
       "      <td>0.000082</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Input        IG\n",
       "4    smoker  0.382378\n",
       "3  children  0.284768\n",
       "2       bmi  0.169715\n",
       "0       age  0.091391\n",
       "6   charges  0.047931\n",
       "1       sex  0.023736\n",
       "5    region  0.000082"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Information Gain :\n",
    "IG=xgb.feature_importances_\n",
    "dic={'Input':X.columns,'IG':IG}\n",
    "df3=pd.DataFrame(dic)\n",
    "df3.sort_values('IG',ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "09a1efdd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#By applying Exstreme Gradient Boosting we get 0.96 accuracy."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83029d1e",
   "metadata": {},
   "source": [
    "# Support Vector Machine (SVM) :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "96dddb51",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.85      0.87       172\n",
      "           1       0.89      0.92      0.90       230\n",
      "\n",
      "    accuracy                           0.89       402\n",
      "   macro avg       0.89      0.88      0.89       402\n",
      "weighted avg       0.89      0.89      0.89       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[146  26]\n",
      " [ 19 211]]\n"
     ]
    }
   ],
   "source": [
    "#Create object for LinearSVC class :\n",
    "svc=LinearSVC(random_state=1)\n",
    "#Call the Function :\n",
    "svc=create_model(svc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "1e299443",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.85      0.87       172\n",
      "           1       0.89      0.92      0.90       230\n",
      "\n",
      "    accuracy                           0.89       402\n",
      "   macro avg       0.89      0.88      0.89       402\n",
      "weighted avg       0.89      0.89      0.89       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[146  26]\n",
      " [ 19 211]]\n"
     ]
    }
   ],
   "source": [
    "#Check for outlier :\n",
    "svc1=LinearSVC(random_state=1,C=0.5)\n",
    "#Call the Function :\n",
    "svc1=create_model(svc1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "5731bf37",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Here after adding external error during training time , no changes in score(recall)\n",
    "#means data is non-linear\n",
    "#We use Non-linear kernal function of SVM means 2 classes are not separatable with straight line \n",
    "#Now we use 2. polynomial kernal function : increase the low dimension to high dimension"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "a57f44f7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.91      0.89       172\n",
      "           1       0.93      0.90      0.91       230\n",
      "\n",
      "    accuracy                           0.90       402\n",
      "   macro avg       0.90      0.90      0.90       402\n",
      "weighted avg       0.90      0.90      0.90       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[156  16]\n",
      " [ 24 206]]\n"
     ]
    }
   ],
   "source": [
    "#Create object for SVC class :\n",
    "poly_svc=SVC(random_state=1,kernel='poly')\n",
    "#Call the Function :\n",
    "poly_svc=create_model(poly_svc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "e97a8201",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.94      0.89       172\n",
      "           1       0.95      0.87      0.91       230\n",
      "\n",
      "    accuracy                           0.90       402\n",
      "   macro avg       0.90      0.90      0.90       402\n",
      "weighted avg       0.90      0.90      0.90       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[161  11]\n",
      " [ 30 200]]\n"
     ]
    }
   ],
   "source": [
    "#Use Radial Basis Kernel Function :\n",
    "r_svc=SVC(random_state=1,kernel='rbf')   #Here 'rbf' is perameter for radial basis function\n",
    "#Call the Function :\n",
    "r_svc=create_model(r_svc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "59641f9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#In Support Vector Machine deu to our data is Non-Linear we sepreated it with the help of Polynomial Kernel Function.\n",
    "#& get 0.90 accuracy."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1a38bbb",
   "metadata": {},
   "source": [
    "# K-Nearest Neighbors (K-NN) :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "00f1598b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.87      0.87       172\n",
      "           1       0.90      0.91      0.90       230\n",
      "\n",
      "    accuracy                           0.89       402\n",
      "   macro avg       0.89      0.89      0.89       402\n",
      "weighted avg       0.89      0.89      0.89       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[149  23]\n",
      " [ 21 209]]\n"
     ]
    }
   ],
   "source": [
    "#Create object for KNeighborsClassifier :\n",
    "knc=KNeighborsClassifier(n_neighbors=5,metric='minkowski',p=2)\n",
    "#Call the Function :\n",
    "knc=create_model(knc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "d1b30cab",
   "metadata": {},
   "outputs": [],
   "source": [
    "#By applying K-NN algorithm we get 0.91 accuracy."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf3c38b8",
   "metadata": {},
   "source": [
    "# Naive-Bayes :"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87c858db",
   "metadata": {},
   "source": [
    "A] Gaussian Naive-Bayes :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "86420574",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.62      0.91      0.74       172\n",
      "           1       0.90      0.57      0.70       230\n",
      "\n",
      "    accuracy                           0.72       402\n",
      "   macro avg       0.76      0.74      0.72       402\n",
      "weighted avg       0.78      0.72      0.72       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[157  15]\n",
      " [ 98 132]]\n"
     ]
    }
   ],
   "source": [
    "#Create object for Gaussian Naive_Bayes class :\n",
    "gnb=GaussianNB()\n",
    "#Call the Function :\n",
    "gnb=create_model(gnb)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41eaee7b",
   "metadata": {},
   "source": [
    "B] Multinomial Naive_Bayes :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "5a9e5e2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#MultinomialNB naive bayes always used object type input columns\n",
    "#means it is used for NLP means natural lang. processing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "f9ff71ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "#train_test_split :\n",
    "X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3,random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "f41c59b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create object for MinMaxScaler class :\n",
    "ss=MinMaxScaler()\n",
    "#Apply StandardScaler on X_train :\n",
    "X_train=ss.fit_transform(X_train)\n",
    "#Apply StandardScaler on X_test :\n",
    "X_test=ss.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "f288a773",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.78      0.49      0.60       172\n",
      "           1       0.70      0.90      0.79       230\n",
      "\n",
      "    accuracy                           0.72       402\n",
      "   macro avg       0.74      0.69      0.70       402\n",
      "weighted avg       0.74      0.72      0.71       402\n",
      "\n",
      "Confusion Matrix : \n",
      "[[ 85  87]\n",
      " [ 24 206]]\n"
     ]
    }
   ],
   "source": [
    "#Create object of MultinomialNB :\n",
    "mnb=MultinomialNB()\n",
    "#Call the Function :\n",
    "mnb=create_model(mnb)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf6308bf",
   "metadata": {},
   "source": [
    "# Conclusion :  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8573fa5d",
   "metadata": {},
   "source": [
    "We train our model with different classification algorithms & get below accuracy :\n",
    "\n",
    "1.Logistic Regression        = 0.91\n",
    "\n",
    "2.Decision Tree              = 0.97 \n",
    "\n",
    "3.Randdom Forest Tree        = 0.97 \n",
    "\n",
    "4.ADA Boosting               = 0.73 \n",
    "\n",
    "5.Gradiant Boosting          = 0.93 \n",
    "\n",
    "6.Exstreme Gradient Boosting = 0.96 \n",
    "\n",
    "7.Support Vector Machine     = 0.90 \n",
    "\n",
    "8.K-Nearest Neighbors        = 0.91 \n",
    "\n",
    "9.Naive_Bayes                = 0.90 \n",
    "\n",
    "According to above we get maximum accuracy in Decision Tree & Random Forest Tree i.e. 0.97. Therefore, we can deploy our model by appling Decision Tree or Random Forest Tree on give 'Insurance' dataset to get maximum accuracy with minimum error.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
